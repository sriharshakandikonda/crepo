call by value.

#include<stdio.h>
void main()
{
    int i=3;
    sum(i);
    printf("%d ",i);
}
sum(int i)
{
    i=i+1;
    printf("%d ",i);
    return;
}
--------------------------------------------
program calling sub program.

#include<stdio.h>
#define b 10
#define a 20
void main()
{
clrscr();
printf("%d",(a+b));
}
--------------------------------------------
call by reference.

#include <stdio.h>

void main()
{
int i=2;
sum(&i);
clrscr();
printf("%d",i);
}
int sum(int *i)
{
*i=*i+2;
printf("%d",i);
return *i;
}

-----------------------------------------------------
global,local,constant.

#include<stdio.h>
float p=3.14;
void main()
{
int r;
float area;
clrscr();
scanf("%d" ,&r);
area = p * r * r;
printf("%.2f",area);
}
---------------------------------------------------------
Terninary operator.

#include<stdio.h>
void main()
{
int x,y,z;
clrscr();
scanf("%d%d",&x,&y);
z=x<y?x:y;
printf("%d lesser value is",z);
}
----------------------------------------------
Array of Strings.

#include <stdio.h>
void main()
{
char colour[4][10] = {"blue","red","yellow","orange"};
int i=0;
for(i=0;i<4;i++)
printf("%s",colour[i]);
}
---------------------------------------------------------------------------------
 Writing a program using "ENUM" 

#include<stdio.h>
enum state {a=2, b=5, c};
enum state d=7;

enum state find()
{
return d;
}

int main()
{
clrscr();
(find() ==(a+b))? printf("true"):printf("false");
return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------
 Program using array of strings.

void main()
{
char color[4][10] = { "Black","Pink","Yellow","Green"};
int i=0;
clrscr();
for (i=0;i<4;i++)
printf("%s\n",color[i]);
}
----------------------------------------------------------------------------------------------------------------------------------------
 Using Recursion

#include<stdio.h>

int main()
{
int x=0,i;
clrscr();
scanf("%d",&i);
x=factorial(i);
printf("\nFactorial of %d is %d",i,x);
return 0;
}

int factorial(int j)
{
  if ( j < 0 )
      return -1;
  if ( j == 0 )
     return 1;
  return (j * factorial(j-1));
}
----------------------------------------------------------------------------------------------------------------------------------------
 Using "conio" function

#include<stdio.h>
#include<conio.h>

void main()
{
clrscr();
printf("Hello World\n");
getch();
}
----------------------------------------------------------------------------------------------------------------------------------------
 Struct type function

#include<stdio.h>
#include<string.h>

struct books
{
char title[50];
char subj[50];
int id;
};

int main()
{
struct books b1;
struct books b2;
clrscr();
strcpy(b1.title,"Zahir");
strcpy(b1.subj,"Novel");
b1.id = 1122;

strcpy(b2.title,"Mainframes");
strcpy(b2.subj,"Programming");
b2.id = 6709;

printf(" Book 1 details :\n%s\n%s\n%d",b1.title,b1.subj,b1.id);
printf("\nBook 2 details :\n%s\n%s\n%d",b2.title,b2.subj,b2.id);
return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------
 To find minimum value

#include<stdio.h>

int main()
{
int min=0;
int num[] = { 9, 18, 7, 56, 76, 1};
clrscr();
min=mina(num,6);
printf("Minimum number = %d\n",min);
return 0;
}

int mina(int arr[], int k)
{
int min=arr[0];
int i=0;
for(i=1;i<k;i++)
{
if( min > arr[i] )
min=arr[i];
}
return min;
}
----------------------------------------------------------------------------------------------------------------------------------------
 Using argc and argv 

#include<stdio.h>
#include<conio.h>

int main(int argc, char *argv[])
{
int i;
clrscr();
   if ( argc >=2)
   {
      printf("Entered values are:\n");
      for(i=0;i < argc;i++ )
      printf("%s\n",argv[i]);
   }
   else
      printf("Argument list is empty");
  return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------
 Using enum and printing the values

#include<stdio.h>

enum day {sun=1,mon,tues=6,wed,thur,fri=11,sat};

int main()
{
clrscr();
printf("%d %d %d %d %d %d %d",sun,mon,tues,wed,thur,fri,sat);
return 0;
}
-----------------------------------------------------------------------
 Using enum and printing the values

#include<stdio.h>

enum day {sun=1,mon,tues=6,wed,thur,fri=11,sat};

int main()
{
clrscr();
printf("%d %d %d %d %d %d %d",sun,mon,tues,wed,thur,fri,sat);
return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------
 Error handling in files

#include<stdio.h>
#include<string.h>
#include<errno.h>

int main()
{
FILE *fp;
clrscr();
fp = fopen("info.txt","r+");

printf("Value of errno: %d\n",errno);
printf("The error message:%s\n",strerror(errno));
perror("Message from perror");
fclose(fp);

return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------
 To find address of pointer and value of pointer

#include<stdio.h>

void main()
{
int i=25,*p,**p2;
clrscr();
p=&i;
p2=&p;
printf("Address of number variable is %x\n",&i);
printf("Address of p variable is %x\n",p);
printf("Value of *p variable is %d\n",*p);
printf("Address of p2 variable is %x\n",p2);
printf("Value of **p2 variable is %d\n",*p);
}
---------------------------------------------------------------------------------------------------------------------------------------
 Addition of pointer address

#include<stdio.h>

void main()
{
int i=25,*p;
clrscr();
p=&i;
printf("Address of number variable is %u\n",p);
p=p+5;
printf("Address of number variable after addition is %u\n",p);
}
